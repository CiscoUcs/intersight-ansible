---
# shared policies, use localhost so these tasks only run once
- hosts: localhost
  connection: local
  gather_facts: no
  vars:
    api_info: &api_info
      api_private_key: "{{ api_private_key }}"
      api_key_id: "{{ api_key_id }}"
    object_state: present
  tasks:
  - name: Configure HX Local Credential (aka Security) Policy
    intersight_objects:
      <<: *api_info
      objects:
      - {
        "api_module": "intersight.apis.hyperflex_local_credential_policy_api",
        "api_class": "HyperflexLocalCredentialPolicyApi",
        "api_method_prefix": "hyperflex_local_credential_policies",
        "get_filter": "Name eq '{{ hx_local_credential_policy }}'",
        "data_module": "intersight.models.hyperflex_local_credential_policy",
        "data_class": "HyperflexLocalCredentialPolicy",
        "api_body": {
            "Name":"{{ hx_local_credential_policy }}",
            "HypervisorAdmin":"{{ hx_hypervisor_admin }}",
            "HypervisorAdminPwd":"{{ hx_hypervisor_password }}",
            "HxdpRootPwd":"{{ hx_dp_root_password }}"
        }
      }
      state: "{{ object_state }}"
  # Sys config (DNS, NTP, and Timezone)
  - name: Configure HX Sys Config Policy
    intersight_objects:
      <<: *api_info
      objects:
      - {
        "api_module": "intersight.apis.hyperflex_sys_config_policy_api",
        "api_class": "HyperflexSysConfigPolicyApi",
        "api_method_prefix": "hyperflex_sys_config_policies",
        "get_filter": "Name eq '{{ hx_sys_config_policy }}'",
        "data_module": "intersight.models.hyperflex_sys_config_policy",
        "data_class": "HyperflexSysConfigPolicy",
        "api_body": {
            "Name":"{{ hx_sys_config_policy }}",
            "Timezone":"{{ hx_sys_config_timezone }}",
            "DnsServers":"{{ hx_sys_config_dns_servers }}",
            "NtpServers":"{{ hx_sys_config_ntp_servers }}"
        }
      }
      state: "{{ object_state }}"
  # vCenter
  - name: Configure HX vCenter Config Policy
    intersight_objects:
      <<: *api_info
      objects:
      - {
        "api_module": "intersight.apis.hyperflex_vcenter_config_policy_api",
        "api_class": "HyperflexVcenterConfigPolicyApi",
        "api_method_prefix": "hyperflex_vcenter_config_policies",
        "get_filter": "Name eq '{{ hx_vcenter_config_policy }}'",
        "data_module": "intersight.models.hyperflex_vcenter_config_policy",
        "data_class": "HyperflexVcenterConfigPolicy",
        "api_body": {
            "Name":"{{ hx_vcenter_config_policy }}",
            "Hostname":"{{ hx_vcenter_hostname }}",
            "Username":"{{ hx_vcenter_username }}",
            "Password":"{{ hx_vcenter_password }}",
            "DataCenter":"{{ hx_vcenter_datacenter }}"
        }
      }
      state: "{{ object_state }}"
  # storage settings
  - name: Configure HX Storage Policy
    intersight_objects:
      <<: *api_info
      objects:
      - {
        "api_module": "intersight.apis.hyperflex_cluster_storage_policy_api",
        "api_class": "HyperflexClusterStoragePolicyApi",
        "api_method_prefix": "hyperflex_cluster_storage_policies",
        "get_filter": "Name eq '{{ hx_cluster_storage_policy }}'",
        "data_module": "intersight.models.hyperflex_cluster_storage_policy",
        "data_class": "HyperflexClusterStoragePolicy",
        "api_body": {
            "Name":"{{ hx_cluster_storage_policy }}",
            "DiskPartitionCleanup": true
        }
      }
      state: "{{ object_state }}"
  # cluster network configuration
  - name: Configure HX Cluster Network Policy
    intersight_objects:
      <<: *api_info
      objects:
      - {
        "api_module": "intersight.apis.hyperflex_cluster_network_policy_api",
        "api_class": "HyperflexClusterNetworkPolicyApi",
        "api_method_prefix": "hyperflex_cluster_network_policies",
        "get_filter": "Name eq '{{ hx_cluster_network_policy }}'",
        "data_module": "intersight.models.hyperflex_cluster_network_policy",
        "data_class": "HyperflexClusterNetworkPolicy",
        "api_body": {
            "Name":"{{ hx_cluster_network_policy }}",

            "MgmtVlan":{
                "VlanId":"{{ hx_mgmt_vlan }}"
            },
            "JumboFrame":false
        }
      }
      state: "{{ object_state }}"
  # proxy settings
  - name: Configure HX Proxy Settings Policy
    intersight_objects:
      <<: *api_info
      objects:
      - {
        "api_module": "intersight.apis.hyperflex_proxy_setting_policy_api",
        "api_class": "HyperflexProxySettingPolicyApi",
        "api_method_prefix": "hyperflex_proxy_setting_policies",
        "get_filter": "Name eq '{{ hx_proxy_setting_policy }}'",
        "data_module": "intersight.models.hyperflex_proxy_setting_policy",
        "data_class": "HyperflexProxySettingPolicy",
        "api_body": {
            "Name":"{{ hx_proxy_setting_policy }}",
            "Hostname":"{{ hx_proxy_setting_hostname }}",
            "Port":"{{ hx_proxy_setting_port }}"
        }
      }
      state: "{{ object_state }}"


# host specific policies.  Use the ucs hosts group to configure multiple targets
- hosts: "{{ target }}"
  connection: local
  gather_facts: no
  vars:
    object_state: present
    target: ucs
  tasks:
  # node config (Node IP and Hostname)
  - name: Configure HX Node Config Policy
    intersight_objects:
      <<: *api_info
      objects:
      - {
        "api_module": "intersight.apis.hyperflex_node_config_policy_api",
        "api_class": "HyperflexNodeConfigPolicyApi",
        "api_method_prefix": "hyperflex_node_config_policies",
        "get_filter": "Name eq '{{ hx_node_config_policy }}'",
        "data_module": "intersight.models.hyperflex_node_config_policy",
        "data_class": "HyperflexNodeConfigPolicy",
        "api_body": {
            "Name":"{{ hx_node_config_policy }}",
            "NodeNamePrefix":"{{ hx_profile_name }}",
            "MgmtIpRange":{
                "StartAddr":"{{ hx_mgmt_ip_start }}",
                "EndAddr":"{{ hx_mgmt_ip_end }}",
                "Netmask":"{{ hx_mgmt_netmask }}",
                "Gateway":"{{ hx_mgmt_gateway }}"
            },
            "HxdpIpRange":{
                "StartAddr":"{{ hx_dp_ip_start }}",
                "EndAddr":"{{ hx_dp_ip_end }}",
                "Netmask":"{{ hx_mgmt_netmask }}",
                "Gateway":"{{ hx_mgmt_gateway }}"
            }
        }
      }
      state: "{{ object_state }}"
